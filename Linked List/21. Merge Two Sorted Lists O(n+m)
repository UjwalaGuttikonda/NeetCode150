/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    
    // Method to merge two sorted singly-linked lists
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to simplify handling of the merged list
        ListNode temp_node = new ListNode(0);
        
        // Pointer to the current node in the merged list
        ListNode current_node = temp_node;

        // Iterate until either list1 or list2 is exhausted
        while (list1 != null && list2 != null) {
            // Compare values of the current nodes in list1 and list2
            if (list1.val < list2.val) {
                // Connect the current_node to the smaller node in list1
                current_node.next = list1;
                // Move to the next node in list1
                list1 = list1.next;
            } else {
                // Connect the current_node to the smaller node in list2
                current_node.next = list2;
                // Move to the next node in list2
                list2 = list2.next;
            }
            // Move the current_node to the recently added node in the merged list
            current_node = current_node.next;
        }
        
        // If there are remaining nodes in list1, connect them to the merged list
        if (list1 != null) {
            current_node.next = list1;
            // Move to the next node in list1
            list1 = list1.next;
        }
        
        // If there are remaining nodes in list2, connect them to the merged list
        if (list2 != null) {
            current_node.next = list2;
            // Move to the next node in list2
            list2 = list2.next;
        }
        
        // Return the merged list starting from the next of the dummy node
        return temp_node.next;
    }
}
