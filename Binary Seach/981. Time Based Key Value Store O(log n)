class TimeMap {

    // Map to store key-value pairs along with timestamps
    private Map<String, List<Data>> map;

    // Constructor to initialize the TimeMap
    public TimeMap() {
        map = new HashMap<>();
    }
    
    // Method to add a new key-value pair with a timestamp
    public void set(String key, String value, int timestamp) {
        // If key doesn't exist in the map, create a new entry
        if (!map.containsKey(key)) {
            map.put(key, new ArrayList<>());
        }
        // Add the new data to the list of the specified key
        map.get(key).add(new Data(value, timestamp));
    }
    
    // Method to retrieve the value associated with a key at a specific timestamp
    public String get(String key, int timestamp) {
        // If key doesn't exist, return an empty string
        if (!map.containsKey(key)) {
            return "";
        }
        // Get the list of data associated with the key
        List<Data> data = map.get(key);
        // Find and return the closest value based on the timestamp
        return findClosestValue(data, timestamp);
    }

    // Helper method to find the closest value in the list based on timestamp
    private String findClosestValue(List<Data> data, int timestamp) {
        int l = 0, r = data.size() - 1;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            // Binary search to find the closest timestamp
            if (data.get(mid).timestamp <= timestamp) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        // Get the closest data (l and r are same here)
        Data closestData = data.get(l);
        // Return the value if the timestamp is not greater, otherwise return an empty string
        return closestData.timestamp > timestamp ? "" : closestData.value;
    }

    // Inner class representing data with a value and timestamp
    class Data {
        String value;
        int timestamp;
        
        // Constructor for Data class
        public Data(String value, int timestamp) {
            this.value = value;
            this.timestamp = timestamp;
        }
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key, value, timestamp);
 * String param_2 = obj.get(key, timestamp);
 */
