class Solution {

    // Method to find the median of two sorted arrays
    public double findMedianSortedArrays(int[] input1, int[] input2) {
        // Ensure input1 is the smaller array to simplify partitioning
        if (input1.length > input2.length) {
            return findMedianSortedArrays(input2, input1);
        }

        int x = input1.length;
        int y = input2.length;

        // Binary search on the smaller array
        int low = 0;
        int high = x;
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;

            // Determine values on the left and right sides of partitions
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : input1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : input1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : input2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : input2[partitionY];

            // Check if the current partitions provide a valid division
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                // Calculate and return the median based on the parity of the total elements
                if ((x + y) % 2 == 0) {
                    return ((double) Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;
                } else {
                    return (double) Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                // Adjust the partition in the smaller array to the left
                high = partitionX - 1;
            } else {
                // Adjust the partition in the smaller array to the right
                low = partitionX + 1;
            }
        }

        // If no valid partition is found, throw an exception
        throw new IllegalArgumentException();
    }
}
